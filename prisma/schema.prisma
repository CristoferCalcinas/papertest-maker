// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Grade {
  FIRST_GRADE
  SECOND_GRADE
  THIRD_GRADE
  FOURTH_GRADE
  FIFTH_GRADE
  SIXTH_GRADE
  SEVENTH_GRADE
  EIGHTH_GRADE
  NINTH_GRADE
  TENTH_GRADE
  ELEVENTH_GRADE
  TWELFTH_GRADE
  UNIVERSITY
  PROFESSIONAL
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  VERY_HARD
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  STUDENT
  TEACHER
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role      UserRole @default(STUDENT)
  isActive  Boolean  @default(true)

  subscription Subscription?
  projects     Project[]
  exams        Exam[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String             @unique
  user      User               @relation(fields: [userId], references: [id])
  plan      Plan               @relation(fields: [planId], references: [id])
  planId    String
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  maxExams      Int
  maxQuestions  Int
  price         Decimal
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  exams       Exam[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Exam {
  id          String      @id @default(uuid())
  title       String
  description String?
  grade       Grade?      @default(OTHER)
  subject     String?
  imageUrl    String?
  difficulty  Difficulty? @default(MEDIUM)
  status      ExamStatus? @default(DRAFT)
  isPublic    Boolean     @default(true)

  projectId String?
  project   Project?   @relation(fields: [projectId], references: [id])
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  questions Question[]

  answersCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([grade])
  @@index([subject])
}

model Question {
  id            String   @id @default(uuid())
  examId        String
  exam          Exam     @relation(fields: [examId], references: [id])
  question      String
  correctAnswer String
  distractors   Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([examId])
}
